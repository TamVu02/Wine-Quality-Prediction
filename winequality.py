# -*- coding: utf-8 -*-
"""WineQuality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GiplB6NZDItDcKoAys-ghIzspjWGgqQL

Add, import libraries
"""

from sklearn import ensemble
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import numpy as np

"""Read data from train set"""

datas = pd.read_csv('trainAlt.txt',";")
df = pd.DataFrame(datas)
freeSul = df["free sulfur dioxide"]
totalSul = df["total sulfur dioxide"]
datas['log free sulfur dioxide']=np.log(df['free sulfur dioxide'] )
datas['log total sulfur dioxide']=np.log(df['total sulfur dioxide'] )
scaler = StandardScaler()
X = df.iloc[ :, [0,1,2,3,4,5,6,7,8,9,10,12,13,14]].values
y = df.iloc[ :, 11].values
X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.15, random_state = 100)
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)
print(X_train.shape)
print(X_train)
print(X_test.shape)
print(X_test)

"""Build model"""

params = {'n_estimators': 200,'max_depth': 11,'learning_rate': 0.1,'subsample':0.8,'random_state':1}
gbrModel = ensemble.GradientBoostingRegressor(**params)
gbrModel.fit(X_train,Y_train)

"""Plot predict y"""

ypred = gbrModel.predict(X_test)
mse = mean_squared_error(Y_test,ypred)
print("MSE: %.2f" % mse)

x_ax = range(len(Y_test))
plt.scatter(x_ax, Y_test, s=5, color="blue", label="original")
plt.plot(x_ax, ypred, lw=0.8, color="red", label="predicted")
plt.legend()
plt.show()
print(gbrModel.score(X_test,Y_test))

"""read test data"""

testData = pd.read_csv('test.csv',";")
df2 = pd.DataFrame(testData)
testData['log free sulfur dioxide']=np.log(df2['free sulfur dioxide'] )
testData['log total sulfur dioxide']=np.log(df2['total sulfur dioxide'] )
Xtest = df2.iloc[ :, 1:].values
#Xtest = scaler.fit_transform(Xtest)
id = df2.iloc[ :, 0].values
predict=gbrModel.predict(Xtest)

"""write to file result"""

result={'id':id,'quality':predict}
df3 = pd.DataFrame(result)
print('\n',df3)
df3.to_csv('result.csv',index=False)